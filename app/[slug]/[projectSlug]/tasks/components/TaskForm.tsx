"use client";

import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import {  Loader2, Wand2 } from "lucide-react";

import { useAction, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Doc, Id } from "@/convex/_generated/dataModel";

import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select"

import { DateRangePickerWithTime } from "@/components/ui/DateRangePickerWithTime";



const taskFormSchema = z.object({
    title: z.string().min(1, "Title is required"),
    description: z.string().optional(),
    priority: z.enum(["low", "medium", "high", "urgent"]).optional(),
    status: z.enum(["todo", "in_progress", "review", "done"]).optional(),
    assignedTo: z.string().nullable().optional(),
    dateRange: z.object({
        from: z.date(),
        to: z.date().optional(),
    }).optional(),
    cost: z.coerce.number().optional(),
}).refine((data) => {
    if (data.dateRange?.from && data.dateRange?.to) {
        return data.dateRange.from <= data.dateRange.to;
    }
    return true;
}, {
    message: "Start date must be before or equal to end date",
    path: ["dateRange"],
});
  
type TaskFormValues = z.infer<typeof taskFormSchema>;

interface TaskFormProps {
    projectId: Id<"projects">;
    teamId: Id<"teams">;
    teamMembers: { clerkUserId: string; name: string; }[];
    currency?: string;
    task?: Doc<"tasks">;
    onTaskCreated?: () => void;
    setIsOpen: (isOpen: boolean) => void;
}
  
export default function TaskForm({ projectId, teamId, teamMembers, currency, task, onTaskCreated, setIsOpen }: TaskFormProps) {
    const [aiMessage, setAiMessage] = useState("");
    const [isParsing, setIsParsing] = useState(false);

    const updateTask = useMutation(api.tasks.updateTask);
    const createTask = useMutation(api.tasks.createTask);
    const generateTaskDetails = useAction(api.tasks.generateTaskDetailsFromPrompt);

    const form = useForm<TaskFormValues>({
      resolver: zodResolver(taskFormSchema),
      defaultValues: task
        ? {
            title: task.title,
            description: task.description,
            priority: task.priority as TaskFormValues["priority"],
            status: task.status as TaskFormValues["status"],
            assignedTo: task.assignedTo || undefined,
            dateRange: {
              from: task.startDate ? new Date(task.startDate) : undefined,
              to: task.endDate ? new Date(task.endDate) : undefined,
            },
            cost: task.cost,
          }
        : {
            title: "",
            description: "",
            priority: undefined,
            status: "todo",
            assignedTo: "",
            dateRange: undefined,
            cost: undefined,
          },
    });

    useEffect(() => {
      if (task) {
        form.reset({
            title: task.title,
            description: task.description,
            priority: task.priority as TaskFormValues["priority"],
            status: task.status as TaskFormValues["status"],
            assignedTo: task.assignedTo || undefined,
            dateRange: {
              from: task.startDate ? new Date(task.startDate) : undefined,
              to: task.endDate ? new Date(task.endDate) : undefined,
            },
            cost: task.cost,
        });
      }
    }, [task, form]);
  
    const handleParse = async () => {
        if (!aiMessage) return;
        setIsParsing(true);
        try {
            const timezoneOffsetInMinutes = new Date().getTimezoneOffset();
            const result = await generateTaskDetails({ 
                prompt: aiMessage, 
                projectId,
                timezoneOffsetInMinutes 
            });
            
            const startDate = result.dateRange?.from ? new Date(result.dateRange.from) : undefined;
            const endDate = result.dateRange?.to ? new Date(result.dateRange.to) : undefined;
            
            form.reset({
                title: result.title || "",
                description: result.description || "",
                priority: result.priority as TaskFormValues["priority"],
                status: result.status as TaskFormValues["status"] || "todo",
                assignedTo: result.assignedTo || undefined,
                dateRange: startDate ? { from: startDate, to: endDate } : undefined,
                cost: result.cost || undefined,
            });

            toast.success("Task details generated by AI!");
            
        } catch (error) {
            toast.error("AI parsing failed.");
            console.error(error);
        } finally {
            setIsParsing(false);
        }
    }

    const onSubmit = async (values: TaskFormValues) => {
      try {
        const submissionData = {
            title: values.title,
            description: values.description,
            priority: values.priority,
            status: values.status || "todo", // Ensure status is not undefined
            assignedTo: values.assignedTo,
            cost: values.cost,
            startDate: values.dateRange?.from?.getTime(),
            endDate: values.dateRange?.to?.getTime(),
        };

        if (task) {
          await updateTask({
            taskId: task._id,
            ...submissionData,
          });
          toast.success("Task updated");
        } else {
          await createTask({
            projectId,
            teamId,
            ...submissionData,
            tags: [], 
          });
          toast.success("Task created");
          form.reset();
        }
        onTaskCreated?.();
        setIsOpen(false);
      } catch (error) {
        toast.error("Something went wrong");
        console.error(error);
      }
    };
  
    return (
        <div className="space-y-4">
            <div className="flex flex-col sm:flex-row gap-2 mb-4">
                <Input 
                    value={aiMessage}
                    onChange={(e) => setAiMessage(e.target.value)}
                    placeholder="Create a task for 'Design review' tomorrow at 3 PM with high priority and cost 150..."
                    disabled={isParsing}
                    className="flex-1"
                    onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                            e.preventDefault();
                            if (!isParsing && aiMessage) {
                                handleParse();
                            }
                        }
                    }}
                />
                <Button 
                    onClick={handleParse} 
                    disabled={isParsing || !aiMessage}
                    className="w-full sm:w-auto shrink-0"
                >
                    {isParsing ? <Loader2 className="h-4 w-4 animate-spin" /> : <Wand2 className="h-4 w-4" />}
                    <span className="ml-2 sm:hidden">Parse</span>
                </Button>
            </div>

            <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                    control={form.control}
                    name="title"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Title</FormLabel>
                        <FormControl>
                        <Input placeholder="e.g. Implement new feature" {...field} />
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <FormField
                        control={form.control}
                        name="status"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Status</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                                <SelectTrigger>
                                <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                                <SelectItem value="todo">To Do</SelectItem>
                                <SelectItem value="in_progress">In Progress</SelectItem>
                                <SelectItem value="review">Review</SelectItem>
                                <SelectItem value="done">Done</SelectItem>
                            </SelectContent>
                            </Select>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        name="priority"
                        render={({ field }) => (
                        <FormItem>
                            <FormLabel>Priority</FormLabel>
                            <Select onValueChange={(value) => field.onChange(value === "none" ? undefined : value)} value={field.value || "none"}>
                            <FormControl>
                                <SelectTrigger>
                                <SelectValue placeholder="Select priority" />
                                </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                                <SelectItem value="none">No priority</SelectItem>
                                <SelectItem value="low">Low</SelectItem>
                                <SelectItem value="medium">Medium</SelectItem>
                                <SelectItem value="high">High</SelectItem>
                                <SelectItem value="urgent">Urgent</SelectItem>
                            </SelectContent>
                            </Select>
                            <FormMessage />
                        </FormItem>
                        )}
                    />
                </div>
                <FormField
                    control={form.control}
                    name="assignedTo"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Assign to</FormLabel>
                        <Select onValueChange={(value) => field.onChange(value === "none" ? undefined : value)} value={field.value || "none"}>
                        <FormControl>
                            <SelectTrigger>
                            <SelectValue placeholder="Select a team member" />
                            </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                            <SelectItem value="none">No assignee</SelectItem>
                            {teamMembers?.map((member) => (
                                <SelectItem key={member.clerkUserId} value={member.clerkUserId}>
                                    {member.name}
                                </SelectItem>
                            ))}
                        </SelectContent>
                        </Select>
                        <FormMessage />
                    </FormItem>
                    )}
                />
                
                {/* Date Range Picker */}
                <FormField
                    control={form.control}
                    name="dateRange"
                    render={({ field }) => (
                    <FormItem className="flex flex-col">
                        <FormLabel>Date Range</FormLabel>
                        <DateRangePickerWithTime
                            value={field.value}
                            onChange={field.onChange}
                        />
                        <FormMessage />
                    </FormItem>
                    )}
                />

                {/*
                <div className="flex items-center space-x-2">
                    <Switch
                        id="add-time"
                        checked={showTime}
                        onCheckedChange={(checked) => {
                            setShowTime(checked);
                            if (!checked) {
                                setStartTime("");
                                setEndTime("");
                            }
                        }}
                    />
                    <Label htmlFor="add-time">Add specific time</Label>
                </div>

                {showTime && (
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <FormItem>
                            <FormLabel>Start Time</FormLabel>
                            <FormControl>
                                <Input
                                    type="time"
                                    value={startTime}
                                    onChange={(e) => setStartTime(e.target.value)}
                                    disabled={!form.watch("dateRange.from")}
                                />
                            </FormControl>
                        </FormItem>
                        <FormItem>
                            <FormLabel>End Time</FormLabel>
                            <FormControl>
                                <Input
                                    type="time"
                                    value={endTime}
                                    onChange={(e) => setEndTime(e.target.value)}
                                    disabled={!form.watch("dateRange.to")}
                                />
                            </FormControl>
                        </FormItem>
                    </div>
                )}
                */}

                <FormField
                    control={form.control}
                    name="cost"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>Cost {currency && `(${currency === 'PLN' ? 'zł' : currency})`}</FormLabel>
                            <FormControl>
                                <Input 
                                    type="number" 
                                    placeholder="Task cost" 
                                    {...field} 
                                    value={field.value ?? ""}
                                    onChange={(e) => field.onChange(e.target.valueAsNumber)}
                                />
                            </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Description</FormLabel>
                            <FormControl>
                                <Textarea
                                    placeholder="Add a more detailed description..."
                                    className="resize-none"
                                    {...field}
                                    value={field.value ?? ""}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />
                <Button type="submit" disabled={form.formState.isSubmitting} className="w-full sm:w-auto">
                    {form.formState.isSubmitting ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
                    {task ? "Save Changes" : "Create Task"}
                </Button>
                </form>
            </Form>
        </div>
    );
} 